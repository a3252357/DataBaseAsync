{
  "DatabaseReplication": {
    // 是否在启动时初始化现有数据（true: 初始化, false: 跳过初始化）
    "InitializeExistingData": false,
    
    // 主库连接字符串
    "LeaderConnectionString": "Data Source=your-leader-server;Initial Catalog=your-database;User ID=username;Password=password;charset=utf8mb4;sslmode=none;Allow User Variables=true;ConvertZeroDateTime=True",
    
    // 从库连接字符串
    "FollowerConnectionString": "Data Source=your-follower-server;Initial Catalog=your-database;User ID=username;Password=password;charset=utf8mb4;AllowLoadLocalInfile=true;sslmode=none;Default Command Timeout=600;Allow User Variables=true;ConvertZeroDateTime=True",
    
    // 从库服务器唯一标识
    "FollowerServerId": "follower-001",
    
    // 每批处理的记录数量（防止队列积压过多数据）
    "BatchSize": 1000,
    
    // 数据保留天数（默认30天）
    "DataRetentionDays": 30,
    
    // 清理任务执行间隔（小时，默认24小时）
    "CleanupIntervalHours": 24,
    
    // 时间同步配置
    "TimeSynchronization": {
      // 是否启用时间同步功能
      "Enabled": true,
      // 时间检查间隔（分钟）
      "CheckIntervalMinutes": 5,
      // 允许的最大时间差异（秒）
      "MaxAllowedDifferenceSeconds": 30,
      // 启动时自动同步
      "SyncOnStartup": true,
      // 定期同步检查间隔（分钟）
      "TimeSyncIntervalMinutes": 60
    },

    // UI配置
    "UI": {
      // 是否启用实时日志显示
      "EnableRealTimeLog": true
    },
    
    // 需要复制的表配置
    "Tables": [
      {
        // 单向复制示例：主库到从库
        "EntityTypeName": "d_truck",
        "TableName": "d_truck",
        "PrimaryKey": "Id",
        "ReplicationIntervalSeconds": 3,
        "Enabled": true,
        "InitializeExistingData": true,
        "ReplicationDirection": "LeaderToFollower",
        "ConflictStrategy": "PreferLeader",
        "ConflictResolutionPriorityFields": [
          "version",
          "updated_at"
        ]
      },
      {
        // 双向同步示例：支持冲突检测和解决
        "EntityTypeName": "d_man",
        "TableName": "d_man",
        "PrimaryKey": "Id",
        "ReplicationIntervalSeconds": 5,
        "Enabled": true,
        "InitializeExistingData": false,
        "ReplicationDirection": "Bidirectional",
        "ConflictStrategy": "LastWriteWins",
        "ConflictResolutionPriorityFields": [
          "row_version",
          "UpdatedAt",
          "modified_time"
        ]
      },
      {
        // 从库到主库示例：优先从库变更
        "EntityTypeName": "user_settings",
        "TableName": "user_settings",
        "PrimaryKey": "Id",
        "ReplicationIntervalSeconds": 10,
        "Enabled": true,
        "InitializeExistingData": true,
        "ReplicationDirection": "FollowerToLeader",
        "ConflictStrategy": "PreferFollower",
        "ConflictResolutionPriorityFields": [
          "priority_score",
          "last_modified"
        ]
      },
      {
        // 字段优先级策略示例
        "EntityTypeName": "inventory",
        "TableName": "inventory",
        "PrimaryKey": "Id",
        "ReplicationIntervalSeconds": 2,
        "Enabled": true,
        "InitializeExistingData": true,
        "ReplicationDirection": "Bidirectional",
        "ConflictStrategy": "FieldPriority",
        "ConflictResolutionPriorityFields": [
          "sequence_number",
          "version",
          "timestamp"
        ]
      },
      {
        // 人工审核策略示例：复杂冲突需要人工处理
        "EntityTypeName": "financial_records",
        "TableName": "financial_records",
        "PrimaryKey": "Id",
        "ReplicationIntervalSeconds": 30,
        "Enabled": true,
        "InitializeExistingData": false,
        "ReplicationDirection": "Bidirectional",
        "ConflictStrategy": "ManualReview",
        "ConflictResolutionPriorityFields": []
      }
    ]
  }
}

/*
配置说明：

1. 复制方向 (ReplicationDirection)：
   - LeaderToFollower: 主库到从库的单向复制
   - FollowerToLeader: 从库到主库的单向复制
   - Bidirectional: 双向同步，支持冲突检测和解决

2. 冲突解决策略 (ConflictStrategy)：
   - PreferLeader: 优先选择主库的变更
   - PreferFollower: 优先选择从库的变更
   - LastWriteWins: 最后写入获胜，基于时间戳和优先级字段
   - FieldPriority: 基于字段优先级解决冲突
   - Custom: 自定义冲突解决逻辑
   - ManualReview: 需要人工审核的冲突

3. 冲突解决优先级字段 (ConflictResolutionPriorityFields)：
   - 用于 LastWriteWins 和 FieldPriority 策略
   - 支持数值、日期时间和版本号字符串比较
   - 按数组顺序依次比较，直到找到差异

4. 性能调优建议：
   - ReplicationIntervalSeconds: 根据数据变更频率调整
   - BatchSize: 根据网络和数据库性能调整
   - 对于高频变更的表，考虑使用较短的复制间隔
   - 对于重要数据，建议启用冲突检测和日志记录
*/